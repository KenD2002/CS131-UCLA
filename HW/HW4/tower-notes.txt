Speed Analysis:

I ran this code:
?- speedup(Ratio).   

and I got
Ratio = 300.0

I used the following testing case:
(3, _, counts([2, 2, 1],[2, 1, 3],[3, 1, 2], [1, 2, 2]))

I think it's because my plain_ntower does not have very good
algorithm, so it does not have a good enough performance to
solve T for N>3. Therefore I chose N=3 for my test case.

Besides, for N>3, my ntower version can actually get T within
around 400 ms. Hence, I can only conclude that the plain_ntower
has way poorer performance than ntower. Furthermore, I manually
added a 0.01 to the cpu_time of ntower, since the N=3 case for
ntower is actually 0.


Ambiguous:

I ran this code:
?- ambiguous(5, C, T1, T2).

and I got

C = counts([4,2,3,2,1],[1,3,2,3,2],[5,3,2,3,1],[1,2,3,2,2])
T1 = [[1,2,3,4,5],[2,1,4,5,3],[4,5,2,3,1],[3,4,5,1,2],[5,3,1,2,4]]
T2 = [[1,2,3,4,5],[3,1,4,5,2],[4,5,2,3,1],[2,4,5,1,3],[5,3,1,2,4]]

Hence this is an ambiguous puzzle for N=5 case.